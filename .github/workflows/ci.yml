name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: |
        black --check src tests
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src tests

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Run unit tests
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN || 'xoxb-test-token' }}
        SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN || 'xapp-test-token' }}
        SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET || 'test-signing-secret' }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY || 'test-supabase-key' }}
        LOG_LEVEL: DEBUG
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.11'
      with:
        name: coverage-report
        path: htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Security check with safety
      run: |
        pip install -r requirements.txt
        safety check --json || true
    
    - name: Security check with bandit
      run: |
        bandit -r src -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check if app starts
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN || 'xoxb-test-token' }}
        SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN || 'xapp-test-token' }}
        SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET || 'test-signing-secret' }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY || 'test-supabase-key' }}
        LOG_LEVEL: DEBUG
      run: |
        # Start the app and check if it initializes without errors
        timeout 10s python -m src.app || code=$?
        # Exit code 124 means timeout (expected), anything else is an error
        if [ "${code:-0}" -ne 124 ] && [ "${code:-0}" -ne 0 ]; then
          echo "App failed to start properly"
          exit 1
        fi
        echo "App initialized successfully"